(function() {
  'use strict';

  // This wrapper helps options.js work with both direct background page access
  // and message passing in Manifest V3
  
  let backgroundPage = null;
  
  function initOptionsPage() {
    console.log('Initializing options page...');
    
    // Try to get background page
    try {
      if (chrome.extension && chrome.extension.getBackgroundPage) {
        backgroundPage = chrome.extension.getBackgroundPage();
        if (backgroundPage) {
          console.log('Got direct access to background page');
          initSettings();
          return;
        }
      }
    } catch (e) {
      console.log('Could not access background page directly:', e);
    }
    
    // Fall back to message passing
    console.log('Falling back to message passing API...');
    setupMessagingAPI();
  }
  
  function setupMessagingAPI() {
    // Create messaging-based proxies for background page objects
    backgroundPage = {
      gsStorage: {
        getOption: function(key) {
          return new Promise(resolve => {
            chrome.runtime.sendMessage({action: 'getOption', key: key}, function(response) {
              resolve(response);
            });
          });
        },
        setOption: function(key, value) {
          return new Promise(resolve => {
            chrome.runtime.sendMessage({action: 'setOption', key: key, value: value}, function(response) {
              resolve(response);
            });
          });
        }
      },
      gsUtils: {
        // Add stubs as needed
      },
      tgs: {
        // Add stubs as needed
      }
    };
    
    // Initialize settings with the messaging API
    initSettingsWithMessaging();
  }
  
  function initSettings() {
    // Initialize settings using direct background page access
    if (!backgroundPage || !backgroundPage.gsStorage) {
      console.error('Background page or gsStorage not available');
      showConnectionError();
      return;
    }
    
    const gsStorage = backgroundPage.gsStorage;
    
    // Original settings initialization code
    var optionEls = document.getElementsByClassName('option');
    for (var i = 0; i < optionEls.length; i++) {
      var element = optionEls[i];
      var pref = element.getAttribute('data-option');
      var type = element.getAttribute('type');
      
      if (type === 'checkbox') {
        element.checked = gsStorage.getOption(pref);
        element.onclick = handleChange;
      } else {
        element.value = gsStorage.getOption(pref);
        element.onchange = handleChange;
      }
    }
    
    setAutoSuspendOptionsVisibility(gsStorage.getOption(gsStorage.SUSPEND_TIME) > 0);
    
    // Other initialization code...
  }
  
  function initSettingsWithMessaging() {
    console.log('Initializing settings with messaging API...');
    
    // Similar to initSettings but using messaging API promises
    var optionEls = document.getElementsByClassName('option');
    for (var i = 0; i < optionEls.length; i++) {
      (function(element) {
        var pref = element.getAttribute('data-option');
        var type = element.getAttribute('type');
        
        backgroundPage.gsStorage.getOption(pref).then(function(value) {
          if (type === 'checkbox') {
            element.checked = value;
            element.onclick = handleChangeWithMessaging;
          } else {
            element.value = value;
            element.onchange = handleChangeWithMessaging;
          }
        });
      })(optionEls[i]);
    }
    
    backgroundPage.gsStorage.getOption('gsStorage.SUSPEND_TIME').then(function(value) {
      setAutoSuspendOptionsVisibility(value > 0);
    });
    
    // Other initialization code...
  }
  
  function handleChange() {
    var pref = this.getAttribute('data-option');
    var value = this.getAttribute('type') === 'checkbox' ? this.checked : this.value;
    backgroundPage.gsStorage.setOption(pref, value);
  }
  
  function handleChangeWithMessaging() {
    var pref = this.getAttribute('data-option');
    var value = this.getAttribute('type') === 'checkbox' ? this.checked : this.value;
    backgroundPage.gsStorage.setOption(pref, value);
  }
  
  function setAutoSuspendOptionsVisibility(visible) {
    Array.prototype.forEach.call(
      document.getElementsByClassName('autoSuspendOption'),
      function(el) {
        if (visible) {
          el.style.display = 'block';
        } else {
          el.style.display = 'none';
        }
      }
    );
  }
  
  function showConnectionError() {
    document.getElementById('options-wrapper').innerHTML = `
      <div class="error-msg">
        <h2>Connection Error</h2>
        <p>Could not connect to extension background.</p>
        <p>This is likely because the extension is using Manifest V3 with a service worker.</p>
        <button id="retryConnection">Retry Connection</button>
      </div>
    `;
    
    document.getElementById('retryConnection').addEventListener('click', function() {
      window.location.reload();
    });
  }
  
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', initOptionsPage);
})();
